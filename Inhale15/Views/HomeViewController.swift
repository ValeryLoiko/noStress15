//
//  HomeViewController.swift
//  no Stress 15
//
//  Created by Valera on 18/02/2025.
//

import UIKit
import SnapKit
import AVKit

/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ñ–æ–Ω–∞ —Å –≤–∏–¥–µ–æ-–∞–Ω–∏–º–∞—Ü–∏–µ–π.
class HomeViewController: UIViewController {
    
    // MARK: - –°–≤–æ–π—Å—Ç–≤–∞
    
    /// ViewModel, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ª–æ–≥–∏–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
    private let viewModel: HomeViewModel
    
    /// –°–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ.
    private var playerLayer: AVPlayerLayer?

    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–∑–¥–∞—ë—Ç ViewModel –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –Ω–µ—ë VideoService.
    init() {
        let videoService = VideoService() // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –≤–∏–¥–µ–æ
        self.viewModel = HomeViewModel(videoService: videoService) // –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –≤ ViewModel
        super.init(nibName: nil, bundle: nil) // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è
    }
    
    /// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥—ë—Ç –≤—Ä—É—á–Ω—É—é.
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞.
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        setupBindings()  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        setupActions()   // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        viewModel.loadVideo(named: "IMG_4246", ofType: "MP4") // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        viewModel.setupAndPlayVideo(named: "homeVideo", ofType: "mp4")
    }
    
    // MARK: - UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    
    /// –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç—ë–º–Ω—ã–π —Å–ª–æ–π –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞.
    private let overlayView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.black.withAlphaComponent(0.3)
        return view
    }()
    
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    private let titleLabel = UIFactory.createLabel(
        fontSize: 36,
        weight: .bold,
        textColor: .white
    )
    
    /// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    private lazy var instructionButton = createStyledButton(title: "üìñ " + LabelText.homeInstruction.text)
    private lazy var timerButton = createStyledButton(title: "‚è± " + LabelText.homeTimer.text)
    private lazy var statsButton = createStyledButton(title: "üìä " + LabelText.homeStats.text)
    private lazy var settingsButton = createStyledButton(title: "‚öôÔ∏è " + LabelText.homeSettings.text)
    
    /// –°—Ç–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
    private lazy var buttonsStackView: UIStackView = {
        let stack = UIStackView(arrangedSubviews: [
            instructionButton, timerButton, statsButton, settingsButton
        ])
        stack.axis = .vertical
        stack.spacing = 20
        stack.distribution = .fillEqually
        stack.alignment = .fill
        return stack
    }()
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω.
    private func setupUI() {
        view.backgroundColor = .black // –§–æ–Ω –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
        view.addSubview(overlayView)
        view.addSubview(titleLabel)
        view.addSubview(buttonsStackView)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç–µ–º–Ω—è—é—â–µ–≥–æ —Å–ª–æ—è
        overlayView.snp.makeConstraints { make in
            make.edges.equalToSuperview() // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        titleLabel.text = LabelText.appName.text
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        titleLabel.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide).offset(50)
            make.centerX.equalToSuperview()
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        buttonsStackView.snp.makeConstraints { make in
            make.top.equalTo(titleLabel.snp.bottom).offset(40)
            make.centerX.equalToSuperview()
            make.width.equalToSuperview().multipliedBy(0.75)
        }
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    private func createStyledButton(title: String) -> UIButton {
        let button = UIButton(type: .system)
        button.setTitle(title, for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 22, weight: .bold)
        button.backgroundColor = UIColor.black.withAlphaComponent(0.6)
        button.layer.cornerRadius = 15
        button.layer.borderWidth = 1.5
        button.layer.borderColor = UIColor.white.withAlphaComponent(0.6).cgColor
        button.snp.makeConstraints { make in
            make.height.equalTo(60)
        }
        return button
    }
    
    // MARK: - –ü—Ä–∏–≤—è–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É ViewModel –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º.
    private func setupBindings() {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∫ —Å–ª–æ—é
        viewModel.onVideoReady = { [weak self] player in
            guard let self = self else { return }
            self.playerLayer = AVPlayerLayer(player: player)
            self.playerLayer?.videoGravity = .resizeAspectFill
            self.playerLayer?.frame = self.view.bounds
            if let playerLayer = self.playerLayer {
                self.view.layer.insertSublayer(playerLayer, at: 0)
            }
        }
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
        viewModel.onNavigateTo = { [weak self] viewController in
            self?.navigationController?.pushViewController(viewController, animated: true)
        }
    }
    
    // MARK: - –î–µ–π—Å—Ç–≤–∏—è
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    private func setupActions() {
        instructionButton.addTarget(self, action: #selector(openScreen(_:)), for: .touchUpInside)
        timerButton.addTarget(self, action: #selector(openScreen(_:)), for: .touchUpInside)
        statsButton.addTarget(self, action: #selector(openScreen(_:)), for: .touchUpInside)
        settingsButton.addTarget(self, action: #selector(openScreen(_:)), for: .touchUpInside)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω.
    @objc private func openScreen(_ sender: UIButton) {
        switch sender {
        case instructionButton:
            viewModel.navigateTo(screen: .instruction)
        case timerButton:
            viewModel.navigateTo(screen: .timer)
        case statsButton:
            viewModel.navigateTo(screen: .stats)
        case settingsButton:
            viewModel.navigateTo(screen: .settings)
        default:
            break
        }
    }
}
